; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
__nv_rsqrtf.exit:
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %7 = and i32 %6, 31, !dbg !11
  %8 = lshr i32 %6, 5, !dbg !11
  %9 = shl i32 %6, 3, !dbg !11
  %10 = and i32 %9, 2040, !dbg !11
  %11 = shl i32 %5, 11, !dbg !12
  %12 = or disjoint i32 %11, %10, !dbg !13
  %13 = sext i32 %12 to i64, !dbg !14
  %14 = getelementptr i16, ptr addrspace(1) %0, i64 %13, !dbg !14
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %14, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !15
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0, !dbg !15
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1, !dbg !15
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3, !dbg !15
  %20 = trunc i32 %16 to i16, !dbg !15
  %extelt.offset = lshr i32 %16, 16, !dbg !15
  %21 = trunc nuw i32 %extelt.offset to i16, !dbg !15
  %22 = trunc i32 %17 to i16, !dbg !15
  %extelt.offset1 = lshr i32 %17, 16, !dbg !15
  %23 = trunc nuw i32 %extelt.offset1 to i16, !dbg !15
  %24 = trunc i32 %18 to i16, !dbg !15
  %extelt.offset2 = lshr i32 %18, 16, !dbg !15
  %25 = trunc nuw i32 %extelt.offset2 to i16, !dbg !15
  %26 = trunc i32 %19 to i16, !dbg !15
  %extelt.offset3 = lshr i32 %19, 16, !dbg !15
  %27 = trunc nuw i32 %extelt.offset3 to i16, !dbg !15
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %20) #5, !dbg !16
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %21) #5, !dbg !16
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %22) #5, !dbg !16
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #5, !dbg !16
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #5, !dbg !16
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #5, !dbg !16
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #5, !dbg !16
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #5, !dbg !16
  %36 = fmul float %28, %28, !dbg !17
  %37 = fmul float %29, %29, !dbg !17
  %38 = fmul float %30, %30, !dbg !17
  %39 = fmul float %31, %31, !dbg !17
  %40 = fmul float %32, %32, !dbg !17
  %41 = fmul float %33, %33, !dbg !17
  %42 = fmul float %34, %34, !dbg !17
  %43 = fmul float %35, %35, !dbg !17
  %44 = fadd float %36, %37, !dbg !18
  %45 = fadd float %44, %38, !dbg !18
  %46 = fadd float %45, %39, !dbg !18
  %47 = fadd float %46, %40, !dbg !18
  %48 = fadd float %47, %41, !dbg !18
  %49 = fadd float %48, %42, !dbg !18
  %50 = fadd float %49, %43, !dbg !18
  %51 = bitcast float %50 to i32, !dbg !23
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 16, i32 31), !dbg !23
  %53 = bitcast i32 %52 to float, !dbg !23
  %54 = fadd float %50, %53, !dbg !18
  %55 = bitcast float %54 to i32, !dbg !23
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 8, i32 31), !dbg !23
  %57 = bitcast i32 %56 to float, !dbg !23
  %58 = fadd float %54, %57, !dbg !18
  %59 = bitcast float %58 to i32, !dbg !23
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 4, i32 31), !dbg !23
  %61 = bitcast i32 %60 to float, !dbg !23
  %62 = fadd float %58, %61, !dbg !18
  %63 = bitcast float %62 to i32, !dbg !23
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 2, i32 31), !dbg !23
  %65 = bitcast i32 %64 to float, !dbg !23
  %66 = fadd float %62, %65, !dbg !18
  %67 = bitcast float %66 to i32, !dbg !23
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 1, i32 31), !dbg !23
  %69 = bitcast i32 %68 to float, !dbg !23
  %70 = fadd float %66, %69, !dbg !18
  %71 = icmp eq i32 %7, 0, !dbg !23
  %72 = and i32 %8, 7, !dbg !23
  %73 = zext nneg i32 %72 to i64, !dbg !23
  %74 = getelementptr float, ptr addrspace(3) @global_smem, i64 %73, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, float %70, i1 %71) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %75 = icmp slt i32 %6, 8, !dbg !23
  %76 = sext i32 %6 to i64, !dbg !23
  %77 = getelementptr float, ptr addrspace(3) @global_smem, i64 %76, !dbg !23
  %78 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %77, i1 %75) #5, !dbg !23
  %79 = bitcast float %78 to i32, !dbg !23
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 4, i32 31), !dbg !23
  %81 = bitcast i32 %80 to float, !dbg !23
  %82 = fadd float %78, %81, !dbg !18
  %83 = bitcast float %82 to i32, !dbg !23
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 2, i32 31), !dbg !23
  %85 = bitcast i32 %84 to float, !dbg !23
  %86 = fadd float %82, %85, !dbg !18
  %87 = bitcast float %86 to i32, !dbg !23
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 1, i32 31), !dbg !23
  %89 = bitcast i32 %88 to float, !dbg !23
  %90 = fadd float %86, %89, !dbg !18
  %91 = and i32 %6, 7, !dbg !23
  %92 = icmp eq i32 %91, 0, !dbg !23
  %93 = and i1 %75, %92, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, float %90, i1 %93) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %94 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !23
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %14, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !24
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !24
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !24
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !24
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !24
  %100 = trunc i32 %96 to i16, !dbg !24
  %extelt.offset4 = lshr i32 %96, 16, !dbg !24
  %101 = trunc nuw i32 %extelt.offset4 to i16, !dbg !24
  %102 = trunc i32 %97 to i16, !dbg !24
  %extelt.offset5 = lshr i32 %97, 16, !dbg !24
  %103 = trunc nuw i32 %extelt.offset5 to i16, !dbg !24
  %104 = trunc i32 %98 to i16, !dbg !24
  %extelt.offset6 = lshr i32 %98, 16, !dbg !24
  %105 = trunc nuw i32 %extelt.offset6 to i16, !dbg !24
  %106 = trunc i32 %99 to i16, !dbg !24
  %extelt.offset7 = lshr i32 %99, 16, !dbg !24
  %107 = trunc nuw i32 %extelt.offset7 to i16, !dbg !24
  %108 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %100) #5, !dbg !25
  %109 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %101) #5, !dbg !25
  %110 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %102) #5, !dbg !25
  %111 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %103) #5, !dbg !25
  %112 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %104) #5, !dbg !25
  %113 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %105) #5, !dbg !25
  %114 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %106) #5, !dbg !25
  %115 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %107) #5, !dbg !25
  %116 = zext nneg i32 %10 to i64, !dbg !26
  %117 = getelementptr i16, ptr addrspace(1) %1, i64 %116, !dbg !26
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %117, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !27
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !27
  %120 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !27
  %121 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !27
  %122 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !27
  %123 = trunc i32 %119 to i16, !dbg !27
  %extelt.offset8 = lshr i32 %119, 16, !dbg !27
  %124 = trunc nuw i32 %extelt.offset8 to i16, !dbg !27
  %125 = trunc i32 %120 to i16, !dbg !27
  %extelt.offset9 = lshr i32 %120, 16, !dbg !27
  %126 = trunc nuw i32 %extelt.offset9 to i16, !dbg !27
  %127 = trunc i32 %121 to i16, !dbg !27
  %extelt.offset10 = lshr i32 %121, 16, !dbg !27
  %128 = trunc nuw i32 %extelt.offset10 to i16, !dbg !27
  %129 = trunc i32 %122 to i16, !dbg !27
  %extelt.offset11 = lshr i32 %122, 16, !dbg !27
  %130 = trunc nuw i32 %extelt.offset11 to i16, !dbg !27
  %131 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %123) #5, !dbg !28
  %132 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %124) #5, !dbg !28
  %133 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %125) #5, !dbg !28
  %134 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %126) #5, !dbg !28
  %135 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %127) #5, !dbg !28
  %136 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %128) #5, !dbg !28
  %137 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %129) #5, !dbg !28
  %138 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %130) #5, !dbg !28
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float 2.048000e+03) #5, !dbg !29
  %140 = fadd float %139, 0x3EB0C6F7A0000000, !dbg !30
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i30 = icmp eq i32 %148, 0, !dbg !31
  br i1 %.not.i30, label %151, label %149, !dbg !31

149:                                              ; preds = %__nv_rsqrtf.exit
  %150 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %140), !dbg !31
  br label %__nv_rsqrtf.exit32, !dbg !31

151:                                              ; preds = %__nv_rsqrtf.exit
  %152 = tail call float @llvm.nvvm.rsqrt.approx.f(float %140), !dbg !31
  br label %__nv_rsqrtf.exit32, !dbg !31

__nv_rsqrtf.exit32:                               ; preds = %149, %151
  %.0.i31 = phi float [ %150, %149 ], [ %152, %151 ], !dbg !31
  %153 = fmul float %108, %.0.i31, !dbg !32
  %154 = fmul float %109, %.0.i31, !dbg !32
  %155 = fmul float %110, %.0.i31, !dbg !32
  %156 = fmul float %111, %.0.i31, !dbg !32
  %157 = fmul float %112, %.0.i31, !dbg !32
  %158 = fmul float %113, %.0.i31, !dbg !32
  %159 = fmul float %114, %.0.i31, !dbg !32
  %160 = fmul float %115, %.0.i31, !dbg !32
  %161 = fadd float %131, 1.000000e+00, !dbg !33
  %162 = fadd float %132, 1.000000e+00, !dbg !33
  %163 = fadd float %133, 1.000000e+00, !dbg !33
  %164 = fadd float %134, 1.000000e+00, !dbg !33
  %165 = fadd float %135, 1.000000e+00, !dbg !33
  %166 = fadd float %136, 1.000000e+00, !dbg !33
  %167 = fadd float %137, 1.000000e+00, !dbg !33
  %168 = fadd float %138, 1.000000e+00, !dbg !33
  %169 = fmul float %161, %153, !dbg !34
  %170 = fmul float %162, %154, !dbg !34
  %171 = fmul float %163, %155, !dbg !34
  %172 = fmul float %164, %156, !dbg !34
  %173 = fmul float %165, %157, !dbg !34
  %174 = fmul float %166, %158, !dbg !34
  %175 = fmul float %167, %159, !dbg !34
  %176 = fmul float %168, %160, !dbg !34
  %177 = getelementptr i16, ptr addrspace(1) %2, i64 %13, !dbg !35
  %178 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %169) #5, !dbg !36
  %179 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %170) #5, !dbg !36
  %180 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %171) #5, !dbg !36
  %181 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %172) #5, !dbg !36
  %182 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %173) #5, !dbg !36
  %183 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %174) #5, !dbg !36
  %184 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %175) #5, !dbg !36
  %185 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %176) #5, !dbg !36
  %186 = insertelement <2 x i16> poison, i16 %178, i64 0, !dbg !36
  %187 = insertelement <2 x i16> %186, i16 %179, i64 1, !dbg !36
  %188 = bitcast <2 x i16> %187 to i32, !dbg !36
  %189 = insertelement <2 x i16> poison, i16 %180, i64 0, !dbg !36
  %190 = insertelement <2 x i16> %189, i16 %181, i64 1, !dbg !36
  %191 = bitcast <2 x i16> %190 to i32, !dbg !36
  %192 = insertelement <2 x i16> poison, i16 %182, i64 0, !dbg !36
  %193 = insertelement <2 x i16> %192, i16 %183, i64 1, !dbg !36
  %194 = bitcast <2 x i16> %193 to i32, !dbg !36
  %195 = insertelement <2 x i16> poison, i16 %184, i64 0, !dbg !36
  %196 = insertelement <2 x i16> %195, i16 %185, i64 1, !dbg !36
  %197 = bitcast <2 x i16> %196 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %188, i32 %191, i32 %194, i32 %197, ptr addrspace(1) %177, i1 true) #5, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6i6ko7hzunbg6k4dj2g7dl6xaqh5cmkewbifikl7g2gsqzbjcke.py", directory: "/data/wyl003/prompt-ordering-research/torchinductor_wyl003/6i")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 33, scope: !7)
!12 = !DILocation(line: 31, column: 45, scope: !7)
!13 = !DILocation(line: 31, column: 40, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 51, scope: !7)
!16 = !DILocation(line: 31, column: 102, scope: !7)
!17 = !DILocation(line: 33, column: 22, scope: !7)
!18 = !DILocation(line: 256, column: 15, scope: !19, inlinedAt: !22)
!19 = distinct !DILexicalBlockFile(scope: !21, file: !20, discriminator: 0)
!20 = !DIFile(filename: "standard.py", directory: "/data/wyl003/anaconda3/envs/llm2/lib/python3.10/site-packages/triton/language")
!21 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!22 = !DILocation(line: 37, column: 25, scope: !7)
!23 = !DILocation(line: 267, column: 36, scope: !21, inlinedAt: !22)
!24 = !DILocation(line: 42, column: 51, scope: !7)
!25 = !DILocation(line: 42, column: 103, scope: !7)
!26 = !DILocation(line: 43, column: 35, scope: !7)
!27 = !DILocation(line: 43, column: 40, scope: !7)
!28 = !DILocation(line: 43, column: 91, scope: !7)
!29 = !DILocation(line: 46, column: 22, scope: !7)
!30 = !DILocation(line: 48, column: 23, scope: !7)
!31 = !DILocation(line: 49, column: 32, scope: !7)
!32 = !DILocation(line: 50, column: 23, scope: !7)
!33 = !DILocation(line: 53, column: 24, scope: !7)
!34 = !DILocation(line: 54, column: 24, scope: !7)
!35 = !DILocation(line: 56, column: 29, scope: !7)
!36 = !DILocation(line: 56, column: 53, scope: !7)
!37 = !DILocation(line: 38, column: 4, scope: !7)
